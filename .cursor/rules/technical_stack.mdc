---
description: 技术栈文档
globs: 
alwaysApply: false
---
# 技术栈文档 - Gemini 内容导出与美化插件

**1. 引言**

本文档详细说明了为"Gemini 内容导出与美化插件"项目确定的技术栈。该选择旨在平衡开发效率、性能、可维护性、社区支持以及与目标浏览器（Chrome, Edge）的兼容性。

**2. 核心前端技术**

*   **HTML5 (HyperText Markup Language 5)**
    *   **用途**: 构建插件所有用户界面的结构，包括注入到 Gemini 页面的按钮、弹出菜单等。
    *   **理由**: Web 开发的基石，所有浏览器原生支持。
*   **CSS3 (Cascading Style Sheets 3)**
    *   **用途**: 负责插件所有 UI 元素的样式和布局。可使用 **Tailwind CSS** 以便快速开发和保持风格统一。
    *   **理由**: Web 开发的标准样式语言。Tailwind CSS 提供快速 UI 构建能力。
*   **TypeScript (基于 ECMAScript 2015+ / ES6+)**
    *   **用途**: 作为主要的编程语言，在 JavaScript 基础上增加静态类型检查。用于实现插件的所有动态行为和逻辑，包括 DOM 操作、浏览器 API 交互、事件处理、Markdown 与图片转换逻辑调用等。
    *   **理由**: 提高代码质量、可维护性和可重构性，减少运行时错误。

**3. 浏览器扩展框架与 API**

*   **Manifest V3**
    *   **用途**: Chrome 和 Edge 扩展的最新标准清单文件。定义插件的元数据、权限、后台逻辑 (Service Worker)、内容脚本等。
    *   **理由**: Google 推荐的最新标准，具有更好的安全性、性能和隐私特性。
*   **Content Scripts**
    *   **用途**: TypeScript 文件，运行在特定网页（即 Gemini 对话页面）的上下文中。用于识别内容、注入 UI、提取内容，并与 Service Worker 或 Popup 通信。
    *   **理由**: Manifest V3 的核心部分，用于与网页内容直接交互。
*   **Service Worker (替代 Background Scripts in Manifest V3)**
    *   **用途**: 在插件后台处理事件和消息。
    *   **理由**: Manifest V3 的要求，更节省资源。
*   **Popup (Browser Action / Page Action)**
    *   **用途**: (可选，根据需求文档 3.4.2) 用户点击浏览器工具栏上的插件图标时显示的 HTML 页面。
    *   **理由**: 提供便捷的用户交互入口。
*   **Storage API (`chrome.storage`)**
    *   **用途**: 存储用户偏好设置。
    *   **理由**: 浏览器插件提供的持久化存储机制。

**4. 核心功能实现库与框架**

*   **4.1. HTML/DOM 到图片转换**
    *   **选定库**: `html2canvas`
        *   **用途**: 将 Gemini 页面的选定内容 (DOM 元素) 渲染成 Canvas，然后导出为图片 (PNG/JPEG)。
        *   **理由**: 较为成熟和广泛使用的客户端 HTML 到 Canvas 渲染库。

*   **4.2. HTML 到 Markdown 转换**
    *   **选定库**: `Turndown`
        *   **用途**: 将从 Gemini 页面捕获的 HTML 内容转换为 Markdown 文本。
        *   **理由**: 流行且功能强大的 HTML 到 Markdown 转换库，支持 GFM 和自定义规则。

**5. 构建与开发工具**

*   **包管理器**:
    *   **选定工具**: `pnpm`
    *   **用途**: 管理项目依赖。
    *   **理由**: 在磁盘空间和安装速度上有优势。
*   **构建/打包工具**:
    *   **选定工具**: `Vite`
        *   **用途**: 现代前端构建工具，提供极速的冷启动、即时模块热更新 (HMR) 和优化的构建输出。
        *   **理由**: 开发体验极佳，与 React (如果用于 Popup 或其他 UI) 集成良好，对 TypeScript 原生支持。
*   **代码检查与格式化**:
    *   `ESLint`:
        *   **用途**: TypeScript 代码静态分析。
        *   **理由**: 行业标准，高度可配置。
    *   `Prettier`:
        *   **用途**: 自动化代码格式化。
        *   **理由**: 广泛使用，与 ESLint 集成良好。
*   **版本控制**:
    *   `Git`
    *   **用途**: 代码版本管理与协作。
    *   **理由**: 分布式版本控制系统的行业标准。
    *   **托管平台**: `GitHub` (或其他类似平台)。

**6. 浏览器兼容性**

*   **主要目标**:
    *   最新版本的 Google Chrome。
    *   最新版本的 Microsoft Edge (基于 Chromium)。
*   **策略**: 使用 Manifest V3 标准，利用 Vite 进行现代 JavaScript 构建，并在目标浏览器上进行充分测试。

**7. 总结**

本技术栈明确了以下核心选择：

*   **语言**: TypeScript
*   **核心库**: `html2canvas` (DOM 转图), `Turndown` (HTML 转 MD), `React` (UI 组件与渲染), `@heroicons/react` (图标), `sonner` (Toast 通知)
*   **构建工具链**: Vite + pnpm
*   **浏览器扩展标准**: Manifest V3
*   **UI 框架/库 (Content Script)**: 直接 DOM 操作结合 `ReactDOM.createRoot` 渲染图标和 Toaster。

此选型旨在结合现代前端开发实践，高效构建高质量的浏览器插件。

**8. 关键 API 和方法调用细节**

本章节旨在详细列出项目开发过程中使用的核心 API 接口及关键方法的调用方式与注意事项，为后续开发和维护提供具体参考。

*   **8.1. 浏览器扩展 API (Manifest V3)**
    *   **`manifest.json` 关键权限**:
        *   `storage`: (可能未使用，但已声明) 用于 `chrome.storage` API。
        *   `activeTab`: 允许在用户交互时访问当前活动标签页，通常与 `scripting` 结合。
        *   `scripting`: 核心权限，允许插件通过 `chrome.scripting` API 在页面上执行脚本或插入 CSS。
        *   `clipboardWrite`: 关键权限，允许使用 `navigator.clipboard.writeText()` 和 `navigator.clipboard.write()` 向系统剪贴板写入文本和图片。
        *   `downloads`: (如果使用 `chrome.downloads` API，例如替代 `<a>` 标签下载法时需要)。
        *   `host_permissions`: 明确授权插件在 `*://gemini.google.com/*` 页面运行。
    *   **内容脚本 (`content.tsx`) 核心交互**:
        *   **DOM 注入**:
            *   使用 `MutationObserver` 监听 Gemini 页面的 `document.body` 或特定容器的变化 (如 `childList: true, subtree: true`)。
            *   在回调中，使用 `querySelectorAll` 结合 `GEMINI_SELECTORS` (如 `modelResponseContainer`, `shareMenuPanelSelector`) 来查找目标元素 (回答容器、分享菜单面板)。
            *   动态创建按钮 (`document.createElement('button')`) 和其他元素，并应用样式。
            *   使用 `ReactDOM.createRoot(iconContainer).render(React.createElement(itemConfig.icon, ...))` 将 `@heroicons/react` 图标渲染到创建的按钮中。
            *   将创建的自定义菜单项插入到检测到的分享菜单面板 (`shareMenuPanel.insertBefore(button, originalFirstChild)`)。
            *   包含幂等性检查，避免重复注入 (`shareMenuPanel.querySelector('.gemini-enhancer-custom-item')`)。
        *   **事件处理**:
            *   为动态创建的按钮添加 `onclick` 事件监听器。
            *   事件处理函数 (`async (e) => { ... }`) 调用 `src/content/actions.ts` 中对应的 `handle...` 函数，并传递关联的回答块根元素 (`answerBlockRoot`)。
            *   使用 `e.stopPropagation()` 和 `e.preventDefault()` 防止事件冒泡和默认行为。
        *   **DOM 查询**:
            *   广泛使用 `querySelector` 和 `querySelectorAll` 配合 `GEMINI_SELECTORS` 中的选择器 (`answerContent`, `answerContentFallbacks`) 来定位回答内容元素。
    *   **剪贴板操作 (`src/content/actions.ts`)**:
        *   `navigator.clipboard.writeText(markdownString)`: 用于复制 Markdown 文本。包含 `.then()` 处理成功和 `.catch()` 处理失败的逻辑。
        *   (已包含) 提供了 `document.execCommand('copy')` 作为 `writeText` 失败时的后备方案。
        *   `navigator.clipboard.write([new ClipboardItem({ 'image/png': imageBlob })])`: 用于将 `html2canvas` 生成的 PNG 图片 `Blob` 复制到剪贴板。
    *   **下载操作 (`src/content/actions.ts`)**:
        *   使用辅助函数 `triggerDownload(blob, filename)` 实现。
        *   内部逻辑:
            1.  `new Blob([markdownContent], { type: 'text/markdown' })` 创建 Markdown Blob。
            2.  `canvas.toBlob((blob) => {...}, 'image/png')` 获取图片 Blob (在 `imageGenerator.ts` 中)。
            3.  `URL.createObjectURL(blob)` 创建对象 URL。
            4.  创建 `<a>` 元素，设置 `href` 为对象 URL，`download` 为包含日期时间戳的文件名 (`Gemini-Export-YYYY-MM-DD_HH-MM.md/.png`)。
            5.  `document.body.appendChild(link)` -> `link.click()` -> `document.body.removeChild(link)` 模拟点击下载。
            6.  `setTimeout(() => URL.revokeObjectURL(url), 10000)` 延迟释放对象 URL。
    *   **用户反馈 (`content.tsx`, `actions.ts`)**:
        *   使用 `sonner` 库的 `toast.success()`, `toast.error()`, `toast.info()` 提供操作反馈。
        *   在 `content.tsx` 初始化时，创建 `toasterContainer` div 并使用 `ReactDOM.createRoot().render(<Toaster ... />)` 渲染 Toaster 组件。

*   **8.2. 核心库方法**
    *   **`html2canvas (element: HTMLElement, options?: Partial<Options>): Promise<HTMLCanvasElement>` (`html2canvas` 库, 在 `src/core/imageGenerator.ts`)**:
        *   **调用时机**: 在 `generateImageBlob` 函数内部，对经过复杂预处理和包装的 DOM 元素 (`elementToCaptureInIframe`) 进行调用。
        *   **执行上下文**: 在动态创建的 `iframe` 内部执行，以隔离样式和提高稳定性。
        *   **关键预处理 (`generateImageBlob` 内)**:
            *   **克隆与清理**: 克隆原始元素，移除干扰元素 (`script`, `iframe`, `on*` 事件处理器)。
            *   **样式应用**: 调用 `applyCanvasFriendlyCodeStyles` 对克隆体内的代码块应用大量直接样式修改 (背景、颜色、填充、行高、字体、隐藏头部、计算高度等)；调用 `forceStyles` 应用通用样式；调用 `transferComputedLineHeight` 尝试同步原始行高。
            *   **结构包装**: 将处理后的克隆体放入包含标题、卡片背景、内边距、阴影、圆角和页脚的 `captureWrapper` 和 `card` 结构中。
            *   **Iframe 注入**: 将 `captureWrapper.outerHTML` 注入到 iframe 的 `body`。
            *   **尺寸调整与延迟**: 调整 iframe 尺寸以适应内容 (`scrollHeight`, `scrollWidth`)，并在调用 `html2canvas` 前加入少量延迟 (`setTimeout(..., 100)`).
        *   **`html2canvas` 选项**:
            *   `useCORS: true` (默认)
            *   `logging: false` (默认)
            *   `backgroundColor: null` (让 `captureWrapper` 的背景生效)
            *   `scale`: 使用 `ImageStyleOptions` 中的 `scale` 或 `window.devicePixelRatio` (优先)。
            *   **未设置**显式的 `width`, `height`, `windowWidth`, `windowHeight`，依赖于 iframe 和内容的自然尺寸。
        *   **输出**: `canvas.toBlob((blob) => { ... }, 'image/png')` 将结果转换为 Blob。
    *   **`TurndownService` (`turndown` 库, 在 `src/core/markdownConverter.ts`)**:
        *   **实例化**: `new TurndownService({ ... })`
        *   **配置**:
            *   `codeBlockStyle: 'fenced'`
            *   `headingStyle: 'atx'`
            *   `bulletListMarker: '-'`
            *   `linkStyle: 'inlined'`
        *   **插件**: `turndownService.use(gfm)` 应用 GitHub Flavored Markdown 插件。
        *   **转换**: `turndownService.turndown(htmlString)` 执行转换。
        *   **(潜在) 自定义规则**: 包含注释掉的 `addRule` 示例，展示如何处理特定 HTML 结构 (如 `<pre class="gemini-code-block">`)。
    *   **`React` & `ReactDOM` (库)**:
        *   **用途**: 主要用于渲染 UI 片段 (如 `@heroicons/react` 图标、`sonner` Toaster) 到内容脚本动态创建的 DOM 容器中。
        *   **挂载图标**: `ReactDOM.createRoot(iconContainer).render(React.createElement(itemConfig.icon, { style: ... }))`
        *   **挂载 Toaster**: `ReactDOM.createRoot(toasterContainer).render(<React.StrictMode><Toaster richColors position="bottom-right" /></React.StrictMode>)`
        *   **UI 组件库**: 使用 `@/components/ui/sonner` (可能是 `shadcn/ui` 的 Sonner 封装) 和 `@heroicons/react`。

*   **8.3. 客户端文件与数据操作** (细节已在 8.1 的下载操作中描述)
    *   `Blob`: 用于创建 Markdown 文件内容或接收 `canvas.toBlob` 的图片数据。
    *   `URL.createObjectURL()`: 为 Blob 创建可供下载的 URL。
    *   `<a>` 标签下载技巧: 标准的客户端文件下载实现方法。
    *   `URL.revokeObjectURL()`: 释放不再需要的对象 URL。

以上总结旨在覆盖项目中的主要技术点和实现方式，为后续的开发迭代提供便利。
