---
description: 
globs: 
alwaysApply: true
---
# 项目分步实现计划 - Gemini 内容导出与美化插件

**基于:**
*   需求文档: `cursor_rules.mdc`
*   技术栈文档: `technical_stack.mdc`
*   交互逻辑文档: `interaction_logic.mdc`

**项目主目录:** `/Users/peiwenyang/Development/gemini-export-enhancer`

**目标:** 创建一个详细的、可逐步执行的开发计划 (带可勾选步骤)，以便在 Cursor 环境中高效推进项目。

---

**阶段 0: 项目初始化与基本设置**

*   [x] **步骤 0.1: 创建项目根目录**
    *   任务:
        *   [x] 在本地开发环境中创建一个名为 `gemini-export-enhancer` (或您选择的其他名称) 的项目文件夹。
    *   验证: 文件夹已创建。
*   [x] **步骤 0.2: 初始化 `pnpm` 项目**
    *   任务:
        *   [x] 在项目根目录下运行 `pnpm init` 命令，生成 `package.json` 文件。
        *   [x] 根据提示填写或后续修改 `package.json` 中的基本信息 (名称, 版本, 描述, 作者等)。
    *   验证: `package.json` 文件已生成。
*   [x] **步骤 0.3: 安装核心开发依赖**
    *   任务:
        *   [x] 运行 `pnpm add -D typescript vite @vitejs/plugin-react tailwindcss postcss autoprefixer eslint prettier eslint-plugin-react eslint-plugin-react-hooks @typescript-eslint/parser @typescript-eslint/eslint-plugin`。
    *   验证: 依赖已正确添加到 `package.json` 的 `devDependencies` 中，并且 `pnpm-lock.yaml` 文件已生成/更新。
*   [x] **步骤 0.4: 安装核心运行时依赖**
    *   任务:
        *   [x] 运行 `pnpm add react react-dom html2canvas turndown`。
    *   验证: 依赖已正确添加到 `package.json` 的 `dependencies` 中。
*   [x] **步骤 0.5: 配置 TypeScript (`tsconfig.json`)**
    *   任务:
        *   [x] 在项目根目录创建 `tsconfig.json` 文件并填入以下配置。
        *   [x] 创建 `tsconfig.node.json` 文件并填入以下配置。
    *   配置 (`tsconfig.json`):
        ```json
        {
          "compilerOptions": {
            "target": "ESNext",
            "useDefineForClassFields": true,
            "lib": ["DOM", "DOM.Iterable", "ESNext"],
            "allowJs": false,
            "skipLibCheck": true,
            "esModuleInterop": true,
            "allowSyntheticDefaultImports": true,
            "strict": true,
            "forceConsistentCasingInFileNames": true,
            "module": "ESNext",
            "moduleResolution": "Node",
            "resolveJsonModule": true,
            "isolatedModules": true,
            "noEmit": true,
            "jsx": "react-jsx"
          },
          "include": ["src", "vite.config.ts", "postcss.config.js", "tailwind.config.js"],
          "references": [{ "path": "./tsconfig.node.json" }]
        }
        ```
    *   配置 (`tsconfig.node.json`):
        ```json
        {
          "compilerOptions": {
            "composite": true,
            "module": "ESNext",
            "moduleResolution": "Node",
            "allowSyntheticDefaultImports": true
          },
          "include": ["vite.config.ts", "postcss.config.js", "tailwind.config.js"]
        }
        ```
    *   验证: `tsconfig.json` 和 `tsconfig.node.json` 文件已创建并配置正确。
*   [x] **步骤 0.6: 配置 Vite (`vite.config.ts`)**
    *   任务:
        *   [x] 在项目根目录创建 `vite.config.ts` 文件并填入以下配置。
    *   配置:
        ```typescript
        import { defineConfig } from 'vite'
        import react from '@vitejs/plugin-react'
        import { resolve } from 'path'

        // https://vitejs.dev/config/
        export default defineConfig({
          plugins: [react()],
          build: {
            rollupOptions: {
              input: {
                content: resolve(__dirname, 'src/content/content.ts'),
                // popup: resolve(__dirname, 'src/popup/popup.html'), // Example: if using a popup
              },
              output: {
                entryFileNames: 'js/[name].js',
                chunkFileNames: 'js/chunks/[name]-[hash].js',
                assetFileNames: 'assets/[name]-[hash].[ext]',
              }
            },
            outDir: 'dist'
          }
        })
        ```
    *   验证: `vite.config.ts` 文件已创建并配置正确。
*   [x] **步骤 0.7: 配置 Tailwind CSS**
    *   任务:
        *   [x] 运行 `pnpm exec tailwindcss init -p` 生成 `tailwind.config.js` 和 `postcss.config.js`。(注意: 使用 `pnpm exec`)
        *   [x] 配置 `tailwind.config.js` 的 `content` 字段。
        *   [x] 创建 `src/index.css` (或类似的主要 CSS 文件) 并添加 Tailwind 指令。
    *   `tailwind.config.js` 配置:
        ```javascript
        /** @type {import('tailwindcss').Config} */
        export default {
          content: [
            "./index.html", // If you have a main index.html for testing the editor UI
            "./src/**/*.{js,ts,jsx,tsx}",
            // "./src/popup/popup.html", // If using a popup
          ],
          theme: {
            extend: {},
          },
          plugins: [],
        }
        ```
    *   `src/index.css` 内容:
        ```css
        @tailwind base;
        @tailwind components;
        @tailwind utilities;
        ```
    *   验证: 配置文件已创建和修改，基础 CSS 文件已创建。
*   [x] **步骤 0.8: 配置 ESLint 和 Prettier**
    *   任务:
        *   [x] 创建 `.eslintrc.cjs` 文件并填入配置。
        *   [x] 创建 `.prettierrc.json` 文件并填入配置。
        *   [x] (可选) 创建 `.prettierignore` 文件并填入配置。
    *   `.eslintrc.cjs` 配置:
        ```javascript
        module.exports = {
          root: true,
          env: { browser: true, es2020: true, 'chrome.runtime': true }, // Added 'chrome.runtime' for browser extension env
          extends: [
            'eslint:recommended',
            'plugin:@typescript-eslint/recommended',
            'plugin:react-hooks/recommended',
            'plugin:react/recommended', // Added react specific rules
            'prettier',
          ],
          ignorePatterns: ['dist', '.eslintrc.cjs', 'vite.config.ts', 'postcss.config.js', 'tailwind.config.js', 'node_modules'],
          parser: '@typescript-eslint/parser',
          plugins: ['react-refresh', '@typescript-eslint', 'react'],
          settings: { // Added react settings
            react: {
              version: 'detect',
            },
          },
          rules: {
            'react/react-in-jsx-scope': 'off', // For Vite/React new JSX transform
            'react-refresh/only-export-components': [
              'warn',
              { allowConstantExport: true },
            ],
            '@typescript-eslint/no-explicit-any': 'warn',
            'no-unused-vars': 'off', // Prefer @typescript-eslint/no-unused-vars
            '@typescript-eslint/no-unused-vars': ['warn', { 'argsIgnorePattern': '^_' }]
          },
        };
        ```
    *   `.prettierrc.json` 配置:
        ```json
        {
          "semi": true,
          "singleQuote": true,
          "jsxSingleQuote": false,
          "trailingComma": "es5",
          "printWidth": 80,
          "tabWidth": 2,
          "useTabs": false
        }
        ```
    *   `.prettierignore` (可选) 配置:
        ```
        dist/
        node_modules/
        package-lock.json
        pnpm-lock.yaml
        ```
    *   验证: 配置文件创建完毕。
*   [x] **步骤 0.9: 创建 `src` 目录结构**
    *   任务:
        *   [x] 在 `src` 目录下创建以下子目录：`content`, `core`, `ui_components`, `assets`。
        *   [ ] (可选) 创建 `background` 和 `popup` 目录。
    *   `src` 目录结构规划:
        ```
        src/
        ├── assets/             # Static assets like images (not plugin icons, those go in public/)
        ├── content/            # Content script logic and UI components injected into page
        │   ├── components/     # React components specific to content script UI
        │   ├── content.ts      # Main content script file
        │   └── selectors.ts    # DOM selectors for Gemini page
        ├── core/               # Core non-UI logic
        │   ├── markdownConverter.ts
        │   └── imageGenerator.ts
        ├── ui_components/      # Common reusable React UI components (Button, Toast etc.)
        ├── index.css           # Main CSS file with Tailwind directives
        └── (optional) background/ # Service worker logic
            └── background.ts
        └── (optional) popup/      # Popup UI and logic
            ├── popup.html
            ├── popup.css
            └── main.tsx
        ```
    *   验证: 目录结构已按规划创建。
*   [~] **步骤 0.10: 创建 Manifest V3 文件 (`public/manifest.json`)**
    *   任务:
        *   [~] 在项目根目录创建 `public` 文件夹 (如果尚不存在)。
        *   [~] 在 `public` 文件夹中创建 `manifest.json` 文件并填入以下初始配置。
        *   [~] 将占位符图标 (`icon16.png`, `icon48.png`, `icon128.png`) 放入 `public/assets/` 目录。
    *   初始 `manifest.json` 配置:
        ```json
        {
          "manifest_version": 3,
          "name": "Gemini Export Enhancer",
          "version": "0.1.0",
          "description": "Export Gemini conversations to Markdown or image.",
          "permissions": [
            "storage",
            "activeTab",
            "scripting",
            "clipboardWrite"
          ],
          "host_permissions": [
            "*://gemini.google.com/*"
          ],
          "action": {
            "default_title": "Gemini Export Enhancer",
            "default_icon": {
              "16": "assets/icon16.png",
              "48": "assets/icon48.png",
              "128": "assets/icon128.png"
            }
          },
          "icons": {
            "16": "assets/icon16.png",
            "48": "assets/icon48.png",
            "128": "assets/icon128.png"
          },
          "content_scripts": [
            {
              "matches": ["*://gemini.google.com/*"],
              "js": ["js/content.js"],
              "css": ["assets/content.css"]
            }
          ],
          "web_accessible_resources": [
            {
              "resources": [
                "assets/*"
              ],
              "matches": ["*://gemini.google.com/*"]
            }
          ]
        }
        ```
    *   验证: `manifest.json` 已创建并配置，`public/assets` 目录及占位图标已创建。
*   [x] **步骤 0.11: Git 初始化和首次提交**
    *   任务:
        *   [x] 创建 `.gitignore` 文件并添加 `node_modules/`, `dist/`, `.env`, `*.log`, `*.session`, `.DS_Store` 等。
        *   [x] 运行 `git init`。
        *   [x] 运行 `git add .`。
        *   [x] 运行 `git commit -m "Initial project setup with basic structure and configurations"`。
    *   验证: 项目已成功初始化为 Git 仓库并完成首次提交。
*   [x] **步骤 0.12: 添加 `package.json` scripts**
    *   任务:
        *   [x] 编辑 `package.json`，添加 `dev`, `build`, `lint`, `preview` scripts。
    *   `scripts` 配置:
        ```json
        "scripts": {
          "dev": "vite",
          "build": "vite build",
          "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
          "preview": "vite preview"
        },
        ```
    *   验证: 可以运行 `pnpm dev` 和 `pnpm build`。

---

**阶段 1: 内容脚本 - UI 注入与内容识别**

*   [x] **步骤 1.1: 创建基础内容脚本文件 (`src/content/content.ts`)**
    *   任务:
        *   [x] 创建 `src/content/content.ts`。
        *   [x] 添加一个简单的 `console.log("Gemini Export Enhancer content script loaded and running!");`。
    *   验证: 在 `package.json` 中添加 `"dev": "vite build --watch"` 脚本 (或类似)，加载插件到浏览器后，在 Gemini 页面控制台能看到此消息，并且修改内容脚本后插件能自动重载。
*   [x] **步骤 1.2: DOM 选择器研究与定义 (`src/content/selectors.ts`)**
    *   任务:
        *   [x] 调研 Gemini 页面的 DOM 结构，确定如何准确选取每个回答的容器元素、以及注入导出按钮的位置。
        *   [x] 在 `src/content/selectors.ts` (新建) 中定义这些选择器常量。
    *   验证: 通过浏览器开发者工具在多个不同的 Gemini 对话页面上验证选择器的准确性和鲁棒性。
*   [x] **步骤 1.3: 导出按钮/菜单的 UI 组件 (`src/content/components/ExportMenu.tsx`)**
    *   任务:
        *   [x] 使用 React 和 Tailwind CSS 创建一个名为 `ExportMenu.tsx` 的组件。
        *   [x] 组件应包含一个触发按钮 (例如一个图标) 和一个点击后出现的下拉菜单，菜单项包括："复制为 MD"、"下载为 MD" (可选)、"复制为图片"、"下载为图片"。
        *   [x] 确保样式使用 Tailwind CSS，并考虑如何避免与 Gemini 页面的样式冲突。
    *   验证: 组件可在测试页面 (`index.html`) 中独立渲染和交互。
*   [x] **步骤 1.4: 动态注入导出菜单到 Gemini 页面**
    *   任务:
        *   [x] 在 `src/content/content.tsx` 中编写逻辑，使用 `MutationObserver` 监听 Gemini 页面的 DOM 变化。
        *   [x] 对于每个检测到的目标元素 (`model-response`)，找到合适的注入点并渲染 `ExportMenu` 组件。
        *   [x] 处理动态加载和移除的内容，确保监听器被正确添加和移除。
    *   验证: 插件加载后，在每个 Gemini 回答附近能看到导出菜单图标，点击图标能展开包含正确选项的菜单。
*   [x] **步骤 1.5: 内容块识别与数据传递准备**
    *   任务:
        *   [x] 修改注入逻辑（或事件处理），使得点击导出菜单项时，能够识别出是哪个回答块 (`model-response`) 触发的事件。
        *   [x] 在事件处理函数中，能够访问到关联的 `model-response` 元素，并能从中提取内容区域的 DOM 元素 (`querySelector(GEMINI_SELECTORS.answerContent)`)。
    *   验证: 点击菜单中的不同导出选项时，`content.tsx` 中的处理函数被调用，并且能正确识别关联的回答块元素。

---

**阶段 2: 核心功能 - Markdown 导出**

*   [x] **步骤 2.1: HTML 到 Markdown 转换模块 (`src/core/markdownConverter.ts`)**
    *   任务:
        *   [x] 创建 `src/core/markdownConverter.ts`。
        *   [x] 实现一个函数，例如 `export function htmlToMarkdown(htmlString: string): string`，内部使用 `turndown` 库。
        *   [x] 根据需要配置 `Turndown` 选项。
    *   验证: 单元测试或手动测试验证转换结果。
*   [x] **步骤 2.2: "复制为 Markdown"功能实现**
    *   任务:
        *   [x] 在 `content.ts` 的 `onExportAction` 处理函数中，当 `actionType` 为 "copyMarkdown" 时：
            1.  [x] 获取关联内容块的 `innerHTML`。
            2.  [x] 调用 `htmlToMarkdown` 函数进行转换。
            3.  [x] 使用 `navigator.clipboard.writeText()` 将 Markdown 复制到剪贴板。
            4.  [ ] 显示成功 Toast 通知。
    *   验证: 在 Gemini 页面使用此功能，检查剪贴板内容。
*   [x] **步骤 2.3: (可选) "下载为 Markdown (.md)"功能实现**
    *   任务:
        *   [x] 在 `content.ts` 的 `onExportAction` 处理函数中，当 `actionType` 为 "downloadMarkdown" 时：
            1.  [x] 获取 HTML 并转换为 Markdown。
            2.  [x] 创建 `Blob` 并生成下载链接触发下载。
            3.  [ ] 显示下载开始通知。
    *   验证: 使用此功能，检查下载的 `.md` 文件内容。

---

**阶段 3: 核心功能 - 图片导出**

*   [x] **步骤 3.1: 核心图片生成模块 (`src/core/imageGenerator.ts`)**
    *   任务:
        *   [x] 创建或完善 `src/core/imageGenerator.ts`。
        *   [x] 实现一个函数，例如 `export async function generateImageBlob(element: HTMLElement): Promise<Blob | null>`。
        *   [x] 内部使用 `html2canvas` 库将传入的 DOM 元素 `element` 渲染到 Canvas 上。
        *   [x] (重要) 在调用 `html2canvas` 前，可能需要对 `element` 或其克隆进行一些样式调整（如设置固定宽度、移除不必要的滚动条、确保背景色可见等）以获得更好的截图效果。
        *   [x] 将 Canvas 内容转换为 `Blob` 对象 (例如 `canvas.toBlob(resolve, 'image/png')`)。
        *   [x] 添加错误处理逻辑。
    *   验证: 能够传入一个 DOM 元素，并成功生成对应的 PNG 图片 Blob 数据。

*   [x] **步骤 3.2: "复制为图片"功能实现**
    *   任务:
        *   [x] 在 `content.ts` 的 `onExportAction` 处理函数中，当 `actionType` 为 "copyImage" 时：
            1.  [x] 获取关联内容块的 DOM 元素。
            2.  [x] 调用 `generateImageBlob` 函数获取图片 Blob。
            3.  [x] 如果成功获取 Blob，使用 `navigator.clipboard.write()` API 将图片写入剪贴板。
            4.  [x] 确保 `manifest.json` 中已声明 `clipboardWrite` 权限。
            5.  [ ] 显示操作结果 Toast 通知。
    *   验证: 在 Gemini 页面使用此功能，能够将回答区域的截图复制到系统剪贴板，并可粘贴到其他应用中。

*   [x] **步骤 3.3: "下载为图片"功能实现**
    *   任务:
        *   [x] 在 `content.ts` 的 `onExportAction` 处理函数中，当 `actionType` 为 "downloadImage" 时：
            1.  [x] 获取关联内容块的 DOM 元素。
            2.  [x] 调用 `generateImageBlob` 函数获取图片 Blob。
            3.  [x] 如果成功获取 Blob，创建一个 `<a>` 元素。
            4.  [x] 设置 `href` 为 `URL.createObjectURL(blob)`。
            5.  [x] 设置 `download` 属性 (例如 `gemini_export.png`)。
            6.  [x] 模拟点击 `<a>` 元素触发下载。
            7.  [x] 下载后使用 `URL.revokeObjectURL(href)` 释放资源。
            8.  [ ] 显示下载开始或完成的 Toast 通知。
    *   验证: 在 Gemini 页面使用此功能，能够成功下载包含回答区域截图的 PNG 文件。

---

**阶段 3.5: 深度研究 - 分享菜单集成**

*   [x] **步骤 3.5.1: "深度研究"界面DOM结构分析与选择器更新**
    *   任务:
        *   [x] 详细调研 Gemini "深度研究" (Deep Research) 页面的 DOM 结构。
        *   [x] 在 `src/content/selectors.ts` 中为深度研究界面的工具栏、内容区域、以及可能的注入点定义新的选择器 (例如，在 `GEMINI_SELECTORS.deepDiveReport` 下)。
    *   验证: [x] 通过浏览器开发者工具验证选择器在"深度研究"页面上的准确性和鲁棒性。
*   [x] **步骤 3.5.2: 内容脚本更新以识别"深度研究"界面**
    *   任务:
        *   [x] 修改 `src/content/deepResearchObserver.ts` 中的 `MutationObserver` 逻辑，以检测"深度研究"界面的加载和卸载 (适配了新的 `panelContainer` 选择器)。
        *   [x] 确保能够区分普通对话界面和"深度研究"界面，以便应用不同的注入逻辑。
    *   验证: [x] 内容脚本能够正确识别"深度研究"界面的出现和消失，并触相应的处理逻辑。
*   [x] **步骤 3.5.3: "深度研究"工具栏菜单注入逻辑**
    *   任务:
        *   [x] 编写逻辑 (在 `deepResearchObserver.ts` 中的 `injectDeepResearchMenu` 函数) 将导出选项注入到"深度研究"页面的工具栏区域。
        *   [x] 考虑注入按钮的样式和布局，使其与"深度研究"界面的原生UI协调。
    *   验证: [x] "深度研究"页面加载后，其工具栏出现导出菜单图标/按钮，点击可展开选项。
*   [x] **步骤 3.5.4: "深度研究"内容获取与导出动作适配**
    *   任务:
        *   [x] 确保 `src/content/actions.ts` 中的 `handleCopyMarkdown`, `handleDownloadMarkdown`, `handleCopyImage`, `handleDownloadImage` 函数能够正确处理来自"深度研究"界面的内容。
        *   [x] 可能需要调整内容提取逻辑，使用为"深度研究"定义的特定选择器 (如 `GEMINI_SELECTORS.deepDiveReport.content`) 来获取报告的HTML内容。
    *   验证: [x] 从"深度研究"界面触发的导出操作（Markdown和图片）能够正确捕获并处理报告内容。
*   [x] **步骤 3.5.5: 功能测试与调整**
    *   任务:
        *   [x] 全面测试在"深度研究"界面中的所有导出功能。
        *   [x] 确保与普通对话界面的导出功能互不干扰。
        *   [x] 修复相关的UI和功能性bug。
    *   验证: [x] "深度研究"的导出功能按预期工作，且不影响原有功能。

---

**阶段 4: 整合功能与性能优化**

*   [x] **步骤 4.1: 实现 Toast 通知组件 (`src/ui_components/Toast.tsx`)**
    *   任务:
        *   [x] 创建一个通用的 `Toast.tsx` 组件用于提供操作反馈 (成功、失败、信息)。 (已通过集成 Sonner via shadcn/ui 实现)
        *   [x] 在关键操作（复制、下载完成/失败等）后添加适当的提示。
    *   验证: 操作后能看到清晰的用户反馈。
*   [ ] **步骤 4.2: 性能优化与代码重构**
    *   任务:
        *   [x] 检查 `html2canvas` 的使用，确保只在需要时调用，避免不必要的性能开销。 (已确认按需调用)
        *   [ ] 优化 DOM 操作和 `MutationObserver` 的效率。
        *   [ ] 重构代码以提高可读性和可维护性。
    *   验证: 插件响应迅速，图片生成和导出过程相对流畅。
*   [x] **步骤 4.3: 测试与调试**
    *   任务:
        *   [x] 对所有功能进行全面的手动测试，包括 Markdown 和图片导出。
        *   [x] 在不同的 Gemini 页面和内容类型上测试（代码块、列表、图片等）。
        *   [x] 修复发现的 Bug 和 UI 问题。 (Toast/菜单关闭问题已修复)
        *   [ ] 确保在 Chrome 和 Edge 浏览器上正常工作。
    *   验证: 应用在各种情况下都能稳定工作，无明显 bug。

---

**阶段 5: 发布准备与后续维护**

*   [ ] **步骤 5.1: 创建并配置最终插件图标**
    *   任务:
        *   [ ] 设计并创建正式的插件图标 (16x16, 48x48, 128x128 PNG)。
        *   [ ] 替换 `public/assets/` 中的占位符图标，并更新 `manifest.json`。
    *   验证: 浏览器工具栏和扩展管理页面显示正式图标。
*   [ ] **步骤 5.2: (可选) 实现插件 Popup 页面 (`src/popup/`)**
    *   任务: 如果决定实现 Popup (用于帮助信息、反馈链接等，可能没有太多设置项了):
        1.  [ ] 创建 Popup 相关文件 (`popup.html`, `main.tsx`, `PopupApp.tsx`)。
        2.  [ ] 在 `vite.config.ts` 中添加入口点（如果需要 JS）。
        3.  [ ] 在 `manifest.json` 中配置 `action.default_popup`。
        4.  [ ] 实现 Popup 的 UI 和基本功能。
    *   验证: 点击插件图标能打开 Popup 页面。
*   [ ] **步骤 5.3: 错误处理与用户反馈完善**
    *   任务:
        *   [ ] 确保所有关键操作都有加载状态指示和明确的成功/失败反馈 (使用 Toast)。
        *   [ ] 对于可能发生的错误 (内容捕获失败、`html2canvas` 失败、剪贴板写入失败等)，提供清晰、友好的错误提示。
    *   验证: 在各种正常和异常情况下，插件都能提供及时、清晰的用户反馈。

---

**阶段 6: 测试、构建与发布准备**

*   [ ] **步骤 6.1: 全面功能测试**
    *   任务:
        *   [ ] 参照更新后的需求文档和交互逻辑文档，对所有功能点进行系统性测试 (Markdown 导出、图片复制、图片下载)。
        *   [ ] 在最新版的 Google Chrome 和 Microsoft Edge 浏览器中进行测试。
    *   关注点: 功能的正确性、UI/UX 的流畅性、边界条件处理。
    *   验证: 所有核心功能按预期工作，无明显 bug。
*   [ ] **步骤 6.2: 兼容性与鲁棒性测试**
    *   任务:
        *   [ ] 测试在 Gemini 页面的多种不同布局、不同类型的回答下，内容识别、Markdown 转换和图片生成功能的鲁棒性。
    *   验证: 插件在常见的使用场景和 Gemini 页面结构下都能稳定工作。
*   [ ] **步骤 6.3: 性能评估与优化**
    *   任务:
        *   [ ] 检查插件的性能，特别关注内容注入、图片生成时间和对页面性能的影响。
        *   [ ] 使用浏览器开发者工具进行分析，找出潜在瓶颈。
        *   [ ] 如有必要，进行优化。
    *   验证: 插件运行流畅，不引起浏览器卡顿或明显延迟。
*   [ ] **步骤 6.4: 准备生产构建**
    *   任务:
        *   [ ] 确保 `package.json` 中的 `build` 脚本 (`vite build`) 正确配置。
        *   [ ] 运行 `pnpm build`。
        *   [ ] 检查 `dist/` 目录生成的产物。
        *   [ ] 确保没有包含 sourcemaps。
    *   验证: `dist/` 目录内容完整且优化。
*   [ ] **步骤 6.5: 打包为 `.zip` 文件供上传**
    *   任务:
        *   [ ] 将 `dist/` 目录的所有内容打包成一个 `.zip` 文件。
        *   [ ] 确保 `.zip` 文件结构符合商店要求。
    *   验证: `.zip` 文件结构正确。
*   [ ] **步骤 6.6: 编写商店列表信息和宣传材料**
    *   任务:
        *   [ ] 准备插件在应用商店中展示的名称、描述、功能亮点 (强调 Markdown 和直接图片导出)。
        *   [ ] 创建高质量的截图 (展示插件功能和直接导出的图片效果)。
        *   [ ] 准备隐私政策说明。
    *   验证: 所有商店列表所需的材料齐全。

---

**后续维护与迭代**

*   [ ] **任务: 监控用户反馈**
*   [ ] **任务: 应对 Gemini 页面更新**
*   [ ] **任务: 功能迭代** (根据需求文档的"未来可能的扩展"部分，如 PDF 导出、图片编辑器等)。

---

此计划将根据实际开发进度和遇到的问题动态调整。每个主要步骤或子任务完成后，应在此文档中勾选对应条目，并进行代码审查和功能验证。
